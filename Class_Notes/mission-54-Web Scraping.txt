Get the text inside the title tag, and assign the result to title_text.

from bs4 import BeautifulSoup

# Initialize the parser, and pass in the content we grabbed earlier.
parser = BeautifulSoup(content, 'html.parser')

# Get the body tag from the document.
# Since we passed in the top level of the document to the parser, we need to pick a branch off of the root.
# With BeautifulSoup, we can access branches by using tag types as attributes.
body = parser.body

# Get the p tag from the body.
p = body.p
title_text = parser.head.title.text

# Print the text inside the p tag.
# Text is a property that gets the inside text of a tag.
print(p.text)

+++++++++++++++++++++++
Apply the find_all method to get the text inside the title tag, and assign the result to title_text.

parser = BeautifulSoup(content, 'html.parser')

# Get a list of all occurrences of the body tag in the element.
body = parser.find_all("body")
head = parser.find_all("head")
# Get the paragraph tag.
p = body[0].find_all("p")
t = head[0].find_all("title")
# Get the text.
print(p[0].text)
print(t[0].text)
title_text = t[0].text
++++++++++++++++++++++++++++++++++++++++++

Get the text in the second inner paragraph, and assign the result to second_inner_paragraph_text.
Get the text of the first outer paragraph, and assign the result to first_outer_paragraph_text.

# Get the website that contains classes.
response = requests.get("http://dataquestio.github.io/web-scraping-pages/simple_classes.html")
content = response.content
parser = BeautifulSoup(content, 'html.parser')

# Get the first inner paragraph.
# Find all the paragraph tags with the class inner-text.
# Then, take the first element in that list.
first_inner_paragraph = parser.find_all("p", class_="inner-text")[0]
print(first_inner_paragraph.text)
second_inner_paragraph_text = parser.find_all("p", class_='inner-text')[1].text
first_outer_paragraph_text = parser.find_all("p", class_="outer-text")[0].text

++++++++++++++++++++++++++++++++++
Select all of the elements that have the class outer-text.

Assign the text of the first paragraph that has the class outer-text to first_outer_text.
Select all of the elements that have the ID second.

Assign the text of the first paragraph that has the ID second to the variable second_text.

# Get the website that contains classes and IDs.
response = requests.get("http://dataquestio.github.io/web-scraping-pages/ids_and_classes.html")
content = response.content
parser = BeautifulSoup(content, 'html.parser')

# Select all of the elements that have the first-item class.
first_items = parser.select(".first-item")
first_outer_text = parser.find_all("p", class_="outer-text")[0].text
second_text = parser.find_all("p", id="second")[0].text
# Print the text of the first paragraph (the first element with the first-item class).
print(first_items[0].text)

+++++++++++++++++++++++++++++++++++++++
Find the Total Plays for the New England Patriots, and assign the result to patriots_total_plays_count.

Find the Total Yards for the Seahawks, and assign the result to seahawks_total_yards_count.


# Get the Superbowl box score data.
#response = requests.get("http://dataquestio.github.io/web-scraping-pages/2014_super_bowl.html")
#content = requests.get("http://dataquestio.github.io/web-scraping-pages/2014_super_bowl.html").content
parser = BeautifulSoup(requests.get("http://dataquestio.github.io/web-scraping-pages/2014_super_bowl.html").content, 'html.parser')

# Find the number of turnovers the Seahawks committed.
turnovers = parser.select("#turnovers")[0]
seahawks_turnovers = turnovers.select("td")[1]
seahawks_turnovers_count = seahawks_turnovers.text
print(seahawks_turnovers_count)

patriots_total_plays_count = parser.select("#total-plays")[0]("td")[2].text
seahawks_total_yards_count = parser.select("#total-yards")[0]("td")[1].text

++++++++++++++++++++++++++++++++++++++++++
